query vulnerable {
  vulnerable {
    app_name
    id
  }
}


query vulnerableClusters {
  application(where: {type: {IN: "http://application-inventory/Vulnerable"}}) {
    app_name
    deployedTo {
      app_name
    }
  }
}

query ApplicationDeployments {
  application {
    deployed {
      deployedOn
      deployedTo {
        id
        app_name
      }
    }
    app_name
  }
}

#Show all vulnerabilities, clusters exposed to it and when it happened first
query MyQuery {
  vulnerability {
    id
    exposedIn {
      includedIn {
        deployed (orderBy: {deployedOn: ASC}, limit: 1 ) {
          deployedOn
          deployedTo {
            id
            app_name
          }
        }
      }
    }
  }
}


---REST

curl -X POST -H 'Accept: application/json' -H 'Content-Type: application/json' http://localhost:8080/graphql -d '
{"query":"query MyQuery {\n  vulnerability {\n    id\n    exposedIn {\n      includedIn {\n        deployed (orderBy: {deployedOn: ASC}, limit: 1 ) {\n          deployedOn\n          deployedTo {\n            id\n            app_name\n          }\n        }\n      }\n    }\n  }\n}\n","operationName":"MyQuery"}
'

Introspection Query:

query IntrospectionQuery {
  __schema {
    queryType { name }
    mutationType { name }
    subscriptionType { name }
    types {
      ...FullType
    }
    directives {
      name
      description
      args {
        ...InputValue
      }
    }
  }
}
fragment FullType on __Type {
  kind
  name
  description
  fields(includeDeprecated: true) {
    name
    description
    args {
      ...InputValue
    }
    type {
      ...TypeRef
    }
    isDeprecated
    deprecationReason
  }
  inputFields {
    ...InputValue
  }
  interfaces {
    ...TypeRef
  }
  enumValues(includeDeprecated: true) {
    name
    description
    isDeprecated
    deprecationReason
  }
  possibleTypes {
    ...TypeRef
  }
}
fragment InputValue on __InputValue {
  name
  description
  type { ...TypeRef }
  defaultValue
}
fragment TypeRef on __Type {
  kind
  name
  ofType {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
      }
    }
  }
}

---LLM
Prompt:
You are an AI expert on GraphQL and Ontotext Semantic Objects service. 
You will be asked to generate GraphQL queries for the Semantic Objects service.
Adhere strictly to the SOML schema provided. Generate queries only based on the SOML schema provided. Don't make any assumptions. 
Don't include in the queries non existing properties. Don't start words with uppercase letters. Don't use plural forms if it is not in the SOML schema. 
Use the SOML schema bellow:
id: /soml/app
prefixes:
  app: http://application-inventory/
  owl: http://www.w3.org/2002/07/owl#
  prov: http://www.w3.org/ns/prov#
  rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns#
  rdfs: http://www.w3.org/2000/01/rdf-schema#
  xml: http://www.w3.org/XML/1998/namespace
  xsd: http://www.w3.org/2001/XMLSchema#
specialPrefixes:
  vocab_prefix: app
  ontology_iri: http://application-inventory
  vocab_iri: http://application-inventory/
properties:
  app:name:
    kind: literal
    range: string
    rdfProp: app:name
  deployedOn:
    kind: literal
    range: date
    rdfProp: app:deployedOn    
  deployedTo:
    kind: object
    max: inf
    range: Host
    rdfProp: app:deployedTo
  deployed:
    kind: object
    max: inf
    range: Deployment
  description:
    kind: literal
    range: string
    rdfProp: app:description
  exposedIn:
    inverseOf: exposedTo
    kind: object
    max: inf
    range: Package
    rdfProp: app:exposedIn
  exposedTo:
    inverseOf: exposedIn
    kind: object
    max: inf
    range: Vulnerability
    rdfProp: app:exposedTo
  includedIn:
    inverseOf: includes
    kind: object
    max: inf
    range: Application
    rdfProp: app:includedIn
  includes:
    inverseOf: includedIn
    kind: object
    max: inf
    range: Package
    rdfProp: app:includes
  version:
    kind: literal
    range: string
    rdfProp: app:version
objects:
  Deployment:
    inherits: ThingInterface
    props:
      deployedTo:
        rdfProp: |
          BIND(STRBEFORE(STR(?_subject), "-on-") AS ?__hostId ) .
          ?_value ?__p ?__s .
          FILTER(STR(?_value) = ?__hostId)      
      deployedOn:
        rdfProp: |
          BIND(STRAFTER(STR(?_subject), "-on-") AS ?_value ).
      
  Application:
    inherits: ThingInterface
    props:
      deployedTo: {}
      deployed:
        rdfProp: |
           <<?_subject app:deployedTo ?__deployedTo >> app:deployedOn ?__deployedOn .
           BIND( IRI(CONCAT(STR(?__deployedTo),"-on-",STR(?__deployedOn))) AS ?_value ).
      includes: {}
    type: app:Application
  Host:
    inherits: ThingInterface
    type: app:Host
  Package:
    inherits: ThingInterface
    props:
      exposedTo: {}
      includedIn: {}
      version: {}
    type: app:Package
  SecurityAgent:
    inherits: prov:AgentInterface
    type: app:SecurityAgent
  Thing:
    inherits: ThingInterface
    type: app:Thing
  ThingInterface:
    descr: Abstract superclass of Thing
    kind: abstract
    props:
      app:name: {}
      description: {}
  Vulnerability:
    inherits: prov:EntityInterface
    props:
      exposedIn: {}
    type: app:Vulnerability
  VulnerabilityReportingActivity:
    inherits: prov:ActivityInterface
    type: app:VulnerabilityReportingActivity
  VulnerabilityScanningResults:
    inherits: prov:EntityInterface
    type: app:VulnerabilityScanningResults
  Vulnerable:
    inherits: ThingInterface
    type: app:Vulnerable
  prov:Activity:
    inherits: prov:ActivityInterface
    type: prov:Activity
  prov:ActivityInterface:
    descr: Abstract superclass of prov:Activity
    kind: abstract
  prov:Agent:
    inherits: prov:AgentInterface
    type: prov:Agent
  prov:AgentInterface:
    descr: Abstract superclass of prov:Agent
    kind: abstract
  prov:Entity:
    inherits: prov:EntityInterface
    type: prov:Entity
  prov:EntityInterface:
    descr: Abstract superclass of prov:Entity
    kind: abstract



- Generate a query to list all applications
- I want to list all applications and what hosts they are deployed to and when.
- I want to list all vulnerabilities and on what hosts they have been deployed to and when it happened the first time  


Points:
- Semantic Objects - separate service
- Feed ontology, get SOML (mapping language explaining SemObj how to generate SPARQL for GraphQL)
- Queries in UI
- Queries via API
- Queries with LLM
- Relationship properties problem - requires manual SOML update (https://platform.ontotext.com/semantic-objects/soml/sparqlTemplates.html)
- GraphQL is primitive -> user story
- LLM makes a lot of mistakes with SOML. Not reliable.
- It's not feasible to put GraphQL schema (result of full introspection Query) into prompt - it's too big. 

